#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

int main(void)
{
	FILE* fp;
	int n = 4000;
	if ((fp = fopen("basic.txt", "wb")) == NULL)
	{
		printf(" 파일을 열 수 없습니다.\n");
		exit(1);
	}

	fwrite(&n, sizeof(int), 1, fp);

	fclose(fp);
	return 0;
}

#define _CRT_SECURE_NO_WARNINGS: 이 줄은 Microsoft C Runtime Library (CRT)의 특정 함수 사용과 관련된 경고를 억제하는 전처리기 지시문입니다. 여기서는 fopen과 같은 함수 사용에 대한 경고를 방지하는 데 일반적으로 사용됩니다.
FILE* fp;: 파일 작업을 처리하는 데 사용되는 FILE 구조체에 대한 포인터를 선언합니다.
if ((fp = fopen("basic.txt", "wb")) == NULL): "basic.txt" 파일을 바이너리 쓰기 모드("wb")로 열려고 시도합니다. 파일 열기가 실패하면(NULL을 반환하면) 오류 메시지가 출력되고 프로그램이 오류 코드로 종료됩니다.
fwrite(&n, sizeof(int), 1, fp);: fwrite 함수를 사용하여 정수 변수 n의 내용을 파일에 씁니다. 크기가 sizeof(int)인 하나의 요소를 씁니다.
fclose(fp);: 파일 스트림을 닫습니다.

================================================================

왜 #define _CRT_SECURE_NO_WARNINGS를 안쓸 수 없는 것인가
#define _CRT_SECURE_NO_WARNINGS는 Microsoft Visual Studio 컴파일러에서 발생하는 일부 경고를 무시하는 역할을 합니다. 이는 특정 함수들이 "안전하지 않다"는 경고를 피하기 위한 것입니다.
주로 fopen, scanf, sprintf 등과 같은 일부 함수들은 보안상의 이유로 간주되어, Microsoft는 이를 사용할 때 경고를 발생시킵니다. 그러나 이러한 경고는 특정 상황에서 실제로 보안 문제를 일으킬 가능성이 낮거나 없는 경우에도 나타날 수 있습니다. 이러한 경우, 프로그래머가 해당 경고를 무시하고자 할 때 #define _CRT_SECURE_NO_WARNINGS를 사용할 수 있습니다.
예를 들어, fopen 함수를 사용할 때 보안성을 고려하여 fopen_s와 같은 안전한 함수를 사용하면 경고를 피할 수 있습니다. 그러나 일부 프로젝트나 코드에서는 호환성 등의 이유로 이러한 안전한 함수를 사용하기 어려울 수 있습니다. 그런 경우에 #define _CRT_SECURE_NO_WARNINGS를 사용하여 해당 경고를 무시할 수 있습니다.
다만, 이는 컴파일러의 특정 경고에 대한 일시적인 해결책이며, 보안상의 측면에서 안전한 대안을 사용하는 것이 좋습니다. 만약 경고가 발생하는 함수를 사용하는 것이 피할 수 없다면, 해당 함수의 안전한 버전을 찾거나 직접 구현하여 보다 안전한 코드를 작성하는 것이 좋습니다.

================================================================

왜 scanf대신에 scanf_s를 써야 하는 것인가?
scanf와 scanf_s의 차이는 보안성과 관련이 있습니다. scanf 함수는 사용자로부터의 입력을 받아들이는데 사용되지만, 이는 일부 보안상의 이슈를 내포하고 있습니다. 특히 버퍼 오버플로우와 같은 문제가 발생할 수 있습니다.
scanf_s는 Microsoft에서 제공하는 안전한 버전의 scanf 함수로, 보안 문제를 최소화하고 안전한 사용을 지원합니다. scanf_s 함수는 일반적인 scanf 함수와 유사하지만 몇 가지 차이가 있습니다:
버퍼 크기 제한: scanf_s에서는 버퍼 크기를 명시적으로 지정해야 합니다. 이는 버퍼 오버플로우를 방지하는 데 도움이 됩니다. 예를 들어, scanf_s("%s", str) 대신 scanf_s("%s", str, (unsigned)_countof(str))와 같이 사용합니다.
보안성 향상: scanf_s는 일부 보안 문제를 방지하기 위해 설계되었습니다. scanf에서 발생할 수 있는 일부 예측하기 어려운 동작을 수정하여 더 안전하게 사용할 수 있도록 돕습니다.
보안성 측면에서 scanf보다 scanf_s를 사용하는 것이 권장되지만, 주의해야 할 몇 가지 사항이 있습니다:
표준화: scanf_s는 C11 표준에서는 선택적인 부분으로만 포함되어 있어, 모든 컴파일러에서 지원되지 않을 수 있습니다. 따라서 이식성을 고려해야 합니다.
호환성: 기존 코드에서 scanf를 scanf_s로 변경할 때는 몇몇 변경이 필요할 수 있습니다. 특히, 버퍼 크기 지정과 관련된 부분을 주의 깊게 살펴봐야 합니다.
안전한 프로그래밍을 위해서는 가능한 경우 scanf_s나 다른 안전한 대안을 사용하는 것이 좋습니다.

================================================================

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h> 
#include <stdlib.h>
#define LINE 30

int main(void)
{
	FILE * fp1, * fp2;
	char line[LINE];
	
	fp1 = fopen("lineInput.txt", "r");
	
	if (fp1 == NULL)
	{
		printf("파일을 열 수 없습니다.\n");
		exit(1);
	}
	
	fp2 = fopen("linetarget.txt", "w");
	
	while (fgets(line, LINE, fp1) != NULL)
		fputs(line, fp2);
	
	fclose(fp1);
	fclose(fp2);
	
	return 0;
}

파일 오픈 확인: fp1은 "lineInput.txt" 파일을 읽기 모드("r")로 엽니다. 파일이 성공적으로 열리면 fp1은 파일을 가리키게 되고, 열리지 않으면 NULL이 됩니다. if (fp1 == NULL)를 사용하여 파일이 성공적으로 열렸는지 확인하고, 열리지 않았을 경우 에러 메시지를 출력하고 프로그램을 종료합니다.
파일 닫기: 파일을 열었으면 반드시 닫아야 합니다. fclose(fp1) 및 fclose(fp2)를 사용하여 파일을 닫습니다. 파일을 닫지 않으면 시스템 리소스가 낭비될 수 있습니다.
매크로: #define LINE 30은 "라인의 길이"에 대한 매크로를 정의합니다. 이 매크로를 사용하면 코드의 여러 부분에서 라인의 길이를 하드코딩하는 대신 한 곳에서 쉽게 수정할 수 있습니다.
에러 메시지: 파일을 열지 못했을 때 사용자에게 알리기 위해 "파일을 열 수 없습니다."라는 메시지를 출력합니다.
종료 상태: 프로그램이 exit(1)을 호출하여 종료되면, 이는 비정상 종료를 나타냅니다. 주로 파일을 열지 못했을 때 사용되며, 부모 프로세스 등에게 오류가 발생했음을 알리는 데 사용됩니다.
이 프로그램은 기본적으로 입력 파일에서 읽은 내용을 출력 파일에 그대로 복사하는 단순한 동작을 수행합니다. 프로그램을 실행하면 "lineInput.txt" 파일에서 읽은 내용이 "linetarget.txt" 파일에 쓰여집니다.

================================================================

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main(void)
{
	FILE* fp;
	char str[10];

	if ((fp = fopen("data.txt", "wb")) == NULL)
	{
		printf("파일을 열 수 없습니다.\n");
		exit(1);
	}

	fprintf(fp, "abcdefghij");
	fclose(fp);

	if ((fp = fopen("data.txt", "rb")) == NULL)
	{
		printf("파일을 열 수 없습니다.\n");
		exit(1);
	}

	fgets(str, 11, fp);
	printf("str 문장 출력 : %s\n\n", str);

	fseek(fp, 4L, SEEK_SET);
	fgets(str, 3, fp);
	printf("4번째부터 2글자 출력 : %s\n", str);

	fseek(fp, -3L, SEEK_CUR);
	fgets(str, 3, fp);
	printf("현 위치의 3글자 앞에서부터 2글자 출력 : %s\n", str);

	fseek(fp, -9L, SEEK_END);
	fgets(str, 5, fp);
	printf("맨 뒤에서 9글자 앞에서부터 4글자 출력 : %s\n ", str);
	fclose(fp);

	return 0;
}

파일 열기 및 쓰기: fopen("data.txt", "wb")은 "data.txt" 파일을 이진 쓰기 모드로 엽니다. "wb" 모드는 텍스트가 아닌 이진 데이터를 쓰기 위해 사용됩니다. "w" 모드는 파일이 없을 경우 새로 생성하며, 파일이 이미 존재할 경우 기존 내용을 지우고 새로 쓰게 됩니다. fprintf(fp, "abcdefghij");은 파일에 문자열 "abcdefghij"를 씁니다.
파일 열기 및 읽기: fopen("data.txt", "rb")는 "data.txt" 파일을 이진 읽기 모드로 엽니다. "rb" 모드는 이진 데이터를 읽기 위해 사용됩니다. fgets 함수를 사용하여 파일에서 문자열을 읽어옵니다.
파일 위치 이동: fseek(fp, 4L, SEEK_SET);은 파일의 시작 위치(SEEK_SET)에서 4바이트 뒤로 이동합니다.
fseek(fp, -3L, SEEK_CUR);은 현재 위치(SEEK_CUR)에서 3바이트 앞으로 이동합니다.
fseek(fp, -9L, SEEK_END);은 파일의 끝(SEEK_END)에서 9바이트 앞으로 이동합니다.
파일 읽기: fgets(str, 11, fp);은 파일에서 최대 10글자(마지막 1글자는 null 문자)를 읽어 str에 저장합니다. 첫 번째 출력에서는 파일의 처음 10글자를 출력합니다.
다음 출력에서는 fseek(fp, 4L, SEEK_SET);에 의해 파일 위치가 4글자로 이동한 후, 3글자를 읽어 출력합니다.
그 다음 출력에서는 fseek(fp, -3L, SEEK_CUR);에 의해 현재 위치에서 3글자 앞으로 이동한 후, 3글자를 읽어 출력합니다.
마지막 출력에서는 fseek(fp, -9L, SEEK_END);에 의해 파일의 끝에서 9글자 앞으로 이동한 후, 5글자를 읽어 출력합니다.
파일 닫기: fclose(fp);를 사용하여 파일을 닫습니다. 파일을 열었으면 반드시 닫아야 합니다.

Run-Time Check Failure #2 - Stack around the variable 'str' was corrupted. 이 뜨는데 그 이유는 무엇일까?

해당 오류 메시지 "Run-Time Check Failure #2 - Stack around the variable 'str' was corrupted"은 버퍼 오버플로우 또는 스택 손상 문제를 나타냅니다. 이 오류는 버퍼의 할당된 크기를 초과하여 데이터를 쓰려고 시도할 때 일반적으로 발생합니다.
이 문제를 해결하기 위해 버퍼에 읽을 문자의 수가 버퍼의 크기를 초과하지 않도록 확인해야 합니다. 버퍼의 크기를 조정하거나 읽을 문자의 수를 조절할 수 있습니다.

수정해서 다시 써 보면


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main(void)
{
    FILE* fp;
    char str[11];  

    if ((fp = fopen("data.txt", "wb")) == NULL)
    {
        printf("파일을 열 수 없습니다.\n");
        exit(1);
    }

    fprintf(fp, "abcdefghij");
    fclose(fp);

    if ((fp = fopen("data.txt", "rb")) == NULL)
    {
        printf("파일을 열 수 없습니다.\n");
        exit(1);
    }

    fgets(str, sizeof(str), fp);  
    printf("str 문장 출력: %s\n\n", str);

    fseek(fp, 4L, SEEK_SET);
    fgets(str, sizeof(str), fp);  
    printf("4번째부터 2글자 출력: %s\n", str);

    fseek(fp, -3L, SEEK_CUR);
    fgets(str, sizeof(str), fp);  
    printf("현 위치의 3글자 앞에서부터 2글자 출력: %s\n", str);

    fseek(fp, -9L, SEEK_END);
    fgets(str, sizeof(str), fp);  
    printf("맨 뒤에서 9글자 앞에서부터 4글자 출력: %s\n ", str);

    fclose(fp);

    return 0;
}

으로 다시 작성해 볼 수 있다.
